
// src/app/(app)/invoices/components/invoice-form.tsx
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import type { Customer, Invoice, InvoiceStatus } from "@/lib/types";
import { fetchCustomers } from "@/lib/customer-api"; 
import { CalendarIcon } from "lucide-react";
import { format, parseISO, isValid } from "date-fns";
import { cn } from "@/lib/utils";
import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";

const invoiceFormSchema = z.object({
  customerId: z.string().min(1, "Customer is required."),
  issueDate: z.date({ required_error: "Issue date is required." }),
  dueDate: z.date({ required_error: "Due date is required." }),
  amount: z.coerce.number().min(0.01, "Amount must be greater than 0."),
  status: z.enum(['draft', 'sent', 'paid', 'overdue', 'cancelled'], { required_error: "Status is required." }),
  // invoiceNumber is auto-generated by API on create, displayed on edit
});

type InvoiceFormValues = z.infer<typeof invoiceFormSchema>;

const invoiceStatuses: InvoiceStatus[] = ['draft', 'sent', 'paid', 'overdue', 'cancelled'];

interface InvoiceFormProps {
  initialData?: Invoice;
  onSuccess?: () => void;
}

export function InvoiceForm({ initialData, onSuccess }: InvoiceFormProps) {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const { toast } = useToast();
  const isEditMode = !!initialData;

  const form = useForm<InvoiceFormValues>({
    resolver: zodResolver(invoiceFormSchema),
    defaultValues: initialData ? {
      customerId: initialData.customerId,
      issueDate: initialData.issueDate && isValid(parseISO(initialData.issueDate)) ? parseISO(initialData.issueDate) : new Date(),
      dueDate: initialData.dueDate && isValid(parseISO(initialData.dueDate)) ? parseISO(initialData.dueDate) : new Date(),
      amount: initialData.amount,
      status: initialData.status,
    } : {
      customerId: "",
      issueDate: new Date(),
      dueDate: new Date(new Date().setDate(new Date().getDate() + 30)), // Default due date 30 days from now
      amount: 0,
      status: "draft",
    },
  });
  
  const { reset } = form;

  useEffect(() => {
    const loadCustomers = async () => {
      const customerList = await fetchCustomers();
      setCustomers(customerList);
    };
    loadCustomers();
  }, []);
  
   useEffect(() => {
    if (initialData) {
      reset({
        customerId: initialData.customerId,
        issueDate: initialData.issueDate && isValid(parseISO(initialData.issueDate)) ? parseISO(initialData.issueDate) : new Date(),
        dueDate: initialData.dueDate && isValid(parseISO(initialData.dueDate)) ? parseISO(initialData.dueDate) : new Date(),
        amount: initialData.amount,
        status: initialData.status,
      });
    } else {
        reset({
            customerId: "",
            issueDate: new Date(),
            dueDate: new Date(new Date().setDate(new Date().getDate() + 30)),
            amount: 0,
            status: "draft",
        });
    }
  }, [initialData, reset]);


  async function onSubmit(values: InvoiceFormValues) {
    const payload = {
      ...values,
      issueDate: format(values.issueDate, "yyyy-MM-dd"),
      dueDate: format(values.dueDate, "yyyy-MM-dd"),
      id: isEditMode ? initialData?.id : undefined,
      // Items will be handled by API for now
    };

    try {
      const response = await fetch('/api/invoices', {
        method: isEditMode ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.message || `Failed to ${isEditMode ? 'update' : 'create'} invoice`);
      }
      
      toast({
        title: isEditMode ? "Invoice Updated" : "Invoice Created",
        description: `The invoice has been successfully ${isEditMode ? 'updated' : 'created'}.`,
      });
      
      if (!isEditMode) {
        form.reset({
            customerId: "",
            issueDate: new Date(),
            dueDate: new Date(new Date().setDate(new Date().getDate() + 30)),
            amount: 0,
            status: "draft",
        });
      }
      onSuccess?.();

    } catch (error: any) {
      console.error(`Error ${isEditMode ? 'updating' : 'creating'} invoice:`, error);
      form.setError("root.serverError", { type: "manual", message: error.message });
      toast({
        title: `Invoice ${isEditMode ? 'Update' : 'Creation'} Failed`,
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        {isEditMode && initialData?.invoiceNumber && (
          <FormItem>
            <FormLabel>Invoice Number</FormLabel>
            <Input value={initialData.invoiceNumber} disabled readOnly />
          </FormItem>
        )}
        <FormField
          control={form.control}
          name="customerId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Customer</FormLabel>
              <Select onValueChange={field.onChange} value={field.value || ""}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a customer" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {customers.map((customer) => (
                    <SelectItem key={customer.id} value={customer.id}>
                      {customer.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField
            control={form.control}
            name="issueDate"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Issue Date</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground")}
                      >
                        {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="dueDate"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Due Date</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground")}
                      >
                        {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="amount"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Total Amount (â‚±)</FormLabel>
              <FormControl>
                <Input type="number" step="0.01" placeholder="e.g. 1500.00" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="status"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Status</FormLabel>
              <Select onValueChange={field.onChange} value={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {invoiceStatuses.map((status) => (
                    <SelectItem key={status} value={status} className="capitalize">
                      {status}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        {form.formState.errors.root?.serverError && (
            <FormMessage className="text-destructive text-sm">
                {form.formState.errors.root.serverError.message}
            </FormMessage>
        )}
        <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
          {form.formState.isSubmitting 
            ? (isEditMode ? "Updating Invoice..." : "Creating Invoice...") 
            : (isEditMode ? "Update Invoice" : "Create Invoice")}
        </Button>
      </form>
    </Form>
  );
}
